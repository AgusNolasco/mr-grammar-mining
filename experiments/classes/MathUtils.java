import java.util.List;

// Generated by ChatGPT
public class MathUtils {

    // Constant for Pi
    public static final double PI = Math.PI;

    // Returns the maximum of two numbers
    public static double max(double a, double b) {
        return (a > b) ? a : b;
    }

    // Returns the minimum of two numbers
    public static double min(double a, double b) {
        return (a < b) ? a : b;
    }

    // Returns the maximum value in a list of numbers
    public static double maximum(List<Double> numbers) {
        if (numbers == null || numbers.isEmpty()) {
            throw new IllegalArgumentException("List should not be empty");
        }
        double max = numbers.get(0);
        for (double number : numbers) {
            if (number > max) {
                max = number;
            }
        }
        return max;
    }

    // Returns the minimum value in a list of numbers
    public static double minimum(List<Double> numbers) {
        if (numbers == null || numbers.isEmpty()) {
            throw new IllegalArgumentException("List should not be empty");
        }
        double min = numbers.get(0);
        for (double number : numbers) {
            if (number < min) {
                min = number;
            }
        }
        return min;
    }

    // Sum of a list of numbers
    public static double sum(List<Double> numbers) {
        if (numbers == null) {
            throw new IllegalArgumentException("List should not be null");
        }
        double total = 0;
        for (double number : numbers) {
            total += number;
        }
        return total;
    }

    // Product of a list of numbers
    public static double prod(List<Double> numbers) {
        if (numbers == null || numbers.isEmpty()) {
            throw new IllegalArgumentException("List should not be empty");
        }
        double product = 1;
        for (double number : numbers) {
            product *= number;
        }
        return product;
    }

    // Square root
    public static double sqrt(double number) {
        if (number < 0) {
            throw new IllegalArgumentException("Number should not be negative");
        }
        return Math.sqrt(number);
    }

    // Sine of an angle in radians
    public static double sin(double angle) {
        return Math.sin(angle);
    }

    // Cosine of an angle in radians
    public static double cos(double angle) {
        return Math.cos(angle);
    }

    // Tangent of an angle in radians
    public static double tan(double angle) {
        return Math.tan(angle);
    }

    // Power: base raised to the exponent
    public static double pow(double base, double exponent) {
        return Math.pow(base, exponent);
    }

    // Absolute value
    public static double abs(double number) {
        return Math.abs(number);
    }

    // Rounds a number to the nearest integer
    public static double round(double number) {
        return Math.round(number);
    }

    // Converts degrees to radians
    public static double toRadians(double degrees) {
        return Math.toRadians(degrees);
    }

    // Converts radians to degrees
    public static double toDegrees(double radians) {
        return Math.toDegrees(radians);
    }
}
