import java.util.*;

// Generated by ChatGPT
public class Graph<T> {
    private Map<T, List<T>> adjacencyList;

    // Constructor
    public Graph() {
        adjacencyList = new HashMap<>();
    }

    // Adds a vertex to the graph
    public void addVertex(T vertex) {
        adjacencyList.putIfAbsent(vertex, new ArrayList<>());
    }

    // Adds an edge between two vertices (undirected)
    public void addEdge(T source, T destination) {
        adjacencyList.putIfAbsent(source, new ArrayList<>());
        adjacencyList.putIfAbsent(destination, new ArrayList<>());
        adjacencyList.get(source).add(destination);
        adjacencyList.get(destination).add(source);
    }

    // Removes an edge between two vertices (undirected)
    public void removeEdge(T source, T destination) {
        List<T> sourceNeighbors = adjacencyList.get(source);
        List<T> destinationNeighbors = adjacencyList.get(destination);
        if (sourceNeighbors != null) sourceNeighbors.remove(destination);
        if (destinationNeighbors != null) destinationNeighbors.remove(source);
    }

    // Removes a vertex and all associated edges
    public void removeVertex(T vertex) {
        List<T> neighbors = adjacencyList.get(vertex);
        if (neighbors != null) {
            for (T neighbor : neighbors) {
                adjacencyList.get(neighbor).remove(vertex);
            }
            adjacencyList.remove(vertex);
        }
    }

    // Returns the neighbors of a given vertex
    public List<T> getNeighbors(T vertex) {
        return adjacencyList.getOrDefault(vertex, new ArrayList<>());
    }

    // Checks if two vertices are connected (for undirected graphs)
    public boolean hasEdge(T source, T destination) {
        return adjacencyList.containsKey(source) && adjacencyList.get(source).contains(destination);
    }

    // Depth-First Search (DFS) traversal
    public void dfs(T startVertex) {
        Set<T> visited = new HashSet<>();
        dfsHelper(startVertex, visited);
    }

    private void dfsHelper(T vertex, Set<T> visited) {
        if (!visited.contains(vertex)) {
            System.out.print(vertex + " ");
            visited.add(vertex);
            for (T neighbor : adjacencyList.getOrDefault(vertex, new ArrayList<>())) {
                dfsHelper(neighbor, visited);
            }
        }
    }

    // Breadth-First Search (BFS) traversal
    public void bfs(T startVertex) {
        Set<T> visited = new HashSet<>();
        Queue<T> queue = new LinkedList<>();
        queue.add(startVertex);
        visited.add(startVertex);

        while (!queue.isEmpty()) {
            T vertex = queue.poll();
            System.out.print(vertex + " ");
            for (T neighbor : adjacencyList.getOrDefault(vertex, new ArrayList<>())) {
                if (!visited.contains(neighbor)) {
                    visited.add(neighbor);
                    queue.add(neighbor);
                }
            }
        }
    }

    // Returns a string representation of the graph
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (T vertex : adjacencyList.keySet()) {
            sb.append(vertex.toString()).append(": ");
            sb.append(adjacencyList.get(vertex).toString()).append("\n");
        }
        return sb.toString();
    }
}
